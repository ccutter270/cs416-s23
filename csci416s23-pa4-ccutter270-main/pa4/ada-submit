#!/usr/bin/env bash
# Submit CS416 PA4 program as a job to ada

# Set SLURM options (you should not need to change these)
#SBATCH --job-name=pa4                          # Job name
#SBATCH --output=pa4-%j.out                     # Name for output log file (%j is job ID)
#SBATCH --cpus-per-task=36                      # Request the entire node
#SBATCH --partition=short                       # Partition (queue) 
#SBATCH --time=00:30:00                         # Time limit hrs:min:sec
#SBATCH --exclude=node[018-019]                 # Only use "original" nodes with 36 cores

# DONT MODIFY THE SLURM OPTIONS ABOVE THIS LINE

# Print SLURM envirionment variables
echo "# Job Info ----------------------------"
echo "Job ID: ${SLURM_JOB_ID}"
echo "Node: ${SLURMD_NODENAME}"
echo "Starting: "`date +"%D %T"`

echo -e "\n# Run Results -------------------------"

# Here you can run the programs to complete the assignment. As before we use taskset to bind the threads
# to a conistent set of cores
taskset -c 1-8 ./pa4-main -t 8 "${GRAPHS}/random_10m.graph"

# If you want to sweep a series of parameters you can use a bash for loop, e.g.
# for threads in 1 2 3 4 8 18 36
# do
#  taskset -c 0-$((threads - 1)) ./pa4-main -t $threads "${GRAPHS}/random_10m.graph"
# done

# or for a series of graphs...
# for graph in "grid1000x1000.graph" "soc-livejournal1_68m.graph" "com-orkut_117m.graph" "random_500m.graph" "rmat_200m.graph"
# do
#  taskset -c 1-8 ./pa4-main -t 8 "${GRAPHS}/${graph}"
# done

# For reference, dump info about the processor
echo -e "\n# CPU Info ----------------------------"
lscpu